#!/usr/bin/env python
"""
Script para popular o banco de dados com dados iniciais
"""
import os
import sys
import django
from decimal import Decimal

# Configurar Django
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'setup.settings')
django.setup()

from django.contrib.auth.models import User
from contracts.models import ContractType

def create_contract_types():
    """Criar tipos de contratos padr√£o"""
    contract_types_data = [
        {
            'name': 'Presta√ß√£o de Servi√ßos',
            'slug': 'prestacao_servico',
            'description': 'Contrato para presta√ß√£o de servi√ßos em geral, ideal para aut√¥nomos e empresas de servi√ßos.',
            'price': Decimal('49.90')
        },
        {
            'name': 'Loca√ß√£o Residencial',
            'slug': 'locacao_residencial',
            'description': 'Contrato de loca√ß√£o para im√≥veis residenciais com todas as cl√°usulas necess√°rias.',
            'price': Decimal('79.90')
        },
        {
            'name': 'Loca√ß√£o Comercial',
            'slug': 'locacao_comercial',
            'description': 'Contrato de loca√ß√£o para im√≥veis comerciais com cl√°usulas espec√≠ficas para neg√≥cios.',
            'price': Decimal('89.90')
        },
        {
            'name': 'Compra e Venda',
            'slug': 'compra_venda',
            'description': 'Contrato para compra e venda de bens m√≥veis e im√≥veis com garantias jur√≠dicas.',
            'price': Decimal('69.90')
        },
        {
            'name': 'Confiss√£o de D√≠vida',
            'slug': 'confissao_divida',
            'description': 'Contrato para formaliza√ß√£o de d√≠vidas com condi√ß√µes de pagamento e juros.',
            'price': Decimal('39.90')
        },
        {
            'name': 'Freelancer',
            'slug': 'freelancer',
            'description': 'Contrato espec√≠fico para trabalhos freelancers com cl√°usulas de direitos autorais.',
            'price': Decimal('59.90')
        }
    ]
    
    for data in contract_types_data:
        contract_type, created = ContractType.objects.get_or_create(
            slug=data['slug'],
            defaults=data
        )
        if created:
            print(f"‚úì Criado tipo de contrato: {contract_type.name}")
        else:
            print(f"‚óã Tipo de contrato j√° existe: {contract_type.name}")

def create_admin_user():
    """Criar usu√°rio administrador"""
    if not User.objects.filter(username='admin').exists():
        User.objects.create_superuser(
            username='admin',
            email='admin@centralcontratos.com',
            password='admin123',
            first_name='Administrador',
            last_name='Sistema'
        )
        print("‚úì Usu√°rio administrador criado")
        print("  Username: admin")
        print("  Password: admin123")
    else:
        print("‚óã Usu√°rio administrador j√° existe")

def create_demo_user():
    """Criar usu√°rio de demonstra√ß√£o"""
    if not User.objects.filter(username='demo').exists():
        User.objects.create_user(
            username='demo',
            email='demo@centralcontratos.com',
            password='demo123',
            first_name='Jo√£o',
            last_name='Silva'
        )
        print("‚úì Usu√°rio de demonstra√ß√£o criado")
        print("  Username: demo")
        print("  Password: demo123")
    else:
        print("‚óã Usu√°rio de demonstra√ß√£o j√° existe")

def main():
    print("üöÄ Populando banco de dados com dados iniciais...\n")
    
    print("üìã Criando tipos de contratos...")
    create_contract_types()
    
    print("\nüë§ Criando usu√°rios...")
    create_admin_user()
    create_demo_user()
    
    print("\n‚úÖ Dados iniciais criados com sucesso!")
    print("\nüåê Para acessar o sistema:")
    print("   ‚Ä¢ Execute: python manage.py runserver")
    print("   ‚Ä¢ Acesse: http://127.0.0.1:8000")
    print("   ‚Ä¢ Admin: http://127.0.0.1:8000/admin")

if __name__ == '__main__':
    main()
