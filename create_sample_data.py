#!/usr/bin/env python
"""
Script simplificado para recriar dados essenciais no MySQL
"""
import os
import sys
import django
from decimal import Decimal

# Configurar Django
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'setup.settings')
django.setup()

from django.contrib.auth.models import User
from contracts.models import ContractType, Category
from core.models import FAQ

def create_sample_data():
    """Cria dados de exemplo para o sistema"""
    
    print("üîß Criando dados essenciais...")
    
    # 1. Criar categorias
    categories_data = [
        ('IMOBILI√ÅRIO', 'imobiliario', 'Contratos relacionados a im√≥veis'),
        ('COMERCIAL', 'comercial', 'Contratos comerciais e empresariais'),
        ('TRABALHO', 'trabalho', 'Contratos de trabalho e presta√ß√£o de servi√ßos'),
        ('FINANCEIRO', 'financeiro', 'Contratos financeiros e empr√©stimos'),
        ('AUTOMOTIVO', 'automotivo', 'Contratos relacionados a ve√≠culos'),
    ]
    
    for name, slug, description in categories_data:
        category, created = Category.objects.get_or_create(
            slug=slug,
            defaults={
                'name': name,
                'description': description,
                'is_active': True
            }
        )
        if created:
            print(f"  ‚úÖ Categoria criada: {category.name}")
    
    # 2. Criar tipos de contrato
    contracts_data = [
        ('Contrato de Compra e Venda de Im√≥vel', 'compra-venda-imovel', 
         'Contrato para compra e venda de im√≥veis residenciais e comerciais', 
         'imobiliario', Decimal('59.90'), '#e74c3c'),
        
        ('Contrato de Loca√ß√£o Residencial', 'locacao-residencial',
         'Contrato para loca√ß√£o de im√≥veis residenciais',
         'imobiliario', Decimal('39.90'), '#3498db'),
        
        ('Contrato de Presta√ß√£o de Servi√ßos', 'prestacao-servicos',
         'Contrato para presta√ß√£o de servi√ßos profissionais',
         'comercial', Decimal('49.90'), '#2ecc71'),
        
        ('Contrato Free Lancer', 'freelancer',
         'Contrato para trabalhos freelancer e aut√¥nomos',
         'trabalho', Decimal('29.90'), '#f39c12'),
        
        ('Contrato de Loca√ß√£o Comercial', 'locacao-comercial',
         'Contrato para loca√ß√£o de im√≥veis comerciais',
         'imobiliario', Decimal('69.90'), '#9b59b6'),
        
        ('Contrato de Confiss√£o de D√≠vidas', 'confissao-dividas',
         'Contrato para confiss√£o e parcelamento de d√≠vidas',
         'financeiro', Decimal('39.90'), '#e67e22'),
        
        ('Contrato de Compra e Venda de Autom√≥vel', 'compra-venda-automovel',
         'Contrato para compra e venda de ve√≠culos automotores',
         'automotivo', Decimal('34.90'), '#1abc9c'),
    ]
    
    for name, slug, description, cat_slug, price, color in contracts_data:
        try:
            category = Category.objects.get(slug=cat_slug)
            contract, created = ContractType.objects.get_or_create(
                slug=slug,
                defaults={
                    'name': name,
                    'description': description,
                    'category': category,
                    'price': price,
                    'color': color,
                    'is_active': True,
                    'order': 0
                }
            )
            if created:
                print(f"  ‚úÖ Contrato criado: {contract.name}")
        except Exception as e:
            print(f"  ‚ö†Ô∏è Erro ao criar contrato {name}: {e}")
    
    # 3. Criar FAQs
    faqs_data = [
        ('Como funciona o download do contrato?', 
         'Ap√≥s a compra, voc√™ receber√° um link para download do contrato em formato Word (.docx), pronto para edi√ß√£o e preenchimento.'),
        
        ('Os contratos s√£o v√°lidos juridicamente?', 
         'Sim! Todos os nossos contratos s√£o elaborados por advogados especializados e seguem a legisla√ß√£o brasileira vigente.'),
        
        ('Posso editar o contrato ap√≥s o download?', 
         'Sim, o arquivo vem em formato edit√°vel para que voc√™ possa personalizar conforme suas necessidades espec√≠ficas.'),
        
        ('Qual a forma de pagamento?', 
         'Aceitamos pagamentos via Mercado Pago (cart√£o de cr√©dito, d√©bito, PIX e boleto banc√°rio).'),
        
        ('Oferecem suporte jur√≠dico?', 
         'Nossos contratos s√£o modelos padr√£o. Para casos espec√≠ficos, recomendamos consultar um advogado.'),
        
        ('Posso usar o contrato quantas vezes quiser?', 
         'Sim, ap√≥s a compra, voc√™ pode usar o modelo quantas vezes precisar.'),
        
        ('Como fa√ßo para entrar em contato?', 
         'Voc√™ pode nos contatar atrav√©s do email contato@centraldecontratos.com ou pelo formul√°rio de contato.'),
        
        ('H√° garantia de satisfa√ß√£o?', 
         'Sim, oferecemos garantia de 30 dias. Se n√£o ficar satisfeito, devolvemos seu dinheiro.')
    ]
    
    for i, (pergunta, resposta) in enumerate(faqs_data):
        faq, created = FAQ.objects.get_or_create(
            pergunta=pergunta,
            defaults={
                'resposta': resposta,
                'ativa': True,
                'ordem': i + 1
            }
        )
        if created:
            print(f"  ‚úÖ FAQ criada: {faq.pergunta[:50]}...")
    
    # 4. Criar usu√°rio demo (al√©m do admin)
    if not User.objects.filter(username='demo').exists():
        demo_user = User.objects.create_user(
            username='demo',
            email='demo@centralcontratos.com',
            password='demo123',
            first_name='Demo',
            last_name='User',
            is_active=True
        )
        print(f"  ‚úÖ Usu√°rio demo criado: {demo_user.username}")
    
    # Relat√≥rio final
    print("\nüìä DADOS CRIADOS COM SUCESSO:")
    print(f"‚úÖ Categorias: {Category.objects.count()}")
    print(f"‚úÖ Tipos de Contrato: {ContractType.objects.count()}")
    print(f"‚úÖ FAQs: {FAQ.objects.count()}")
    print(f"‚úÖ Usu√°rios: {User.objects.count()}")
    print("\nüéâ Sistema pronto para uso!")

if __name__ == "__main__":
    create_sample_data()
